#!/usr/bin/python
###
# Current cost plugin
#
# This is a munin plugin to extract values from the Current Cost EnviR meter.
#
# Link this as currentcost_watts or currentcost_temp
#
# Environment variables supported:
#
#	* port: Serial port to connect to (default /dev/ttyUSB0)
#	* baud: Baud rate (default 57600)
# 
# @author Marcus Povey <marcus@marcus-povey.co.uk>
# @copyright Marcus Povey 2013
# @link http://www.marcus-povey.co.uk
# 
# Copyright (c) 2013 Marcus Povey
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
###

import sys
import os

def main(argv):
	
	# Path to the current cost script, modify accordingly
	PATH = os.getenv('path', '../')
	PATH = PATH + 'current-cost.py'
	command = argv[0].split('_')
	
	# Set defaults, pulling from environment if necessary
	format = ''
	port = os.getenv('port', '/dev/ttyUSB0')
	baud = os.getenv('baud', 57600)
	timeout = 30
	
	format = '"watts.value {{watts}}|temp.value {{temp}}"'
	
	# Which mode?
	if command[1] == 'watts':
			
		# Is this a config mode?
		if len(argv) > 1 and argv[1] == 'config':
			# CONFIG
			print ('graph_args --base 1000 -l 0')
			print ('graph_scale no')
			print ('graph_title Current Cost Energy Usage')
			print ('graph_vlabel Power Usage in Watts')
			print ('graph_category Power')
			print ('watts.label Watts')
			sys.exit()
			
		os.system('cat /tmp/__currentcost_out | cut -d\'|\' -f1')
		
	elif command[1] == 'temp':
		
		# Is this a config mode?
		if len(argv) > 1 and argv[1] == 'config':
			# CONFIG
			print ('graph_args --base 1000 -l -50')
			print ('graph_scale no')
			print ('graph_title Current Cost Temperature')
			print ('graph_vlabel Temperature C')
			print ('graph_category Power')
			print ('temp.label Temperature')
			sys.exit()
			
		os.system('cat /tmp/__currentcost_out | cut -d\'|\' -f2')

	if not os.path.isfile('/tmp/__currentcost.lock'):
		os.system('touch /tmp/__currentcost.lock && ' + PATH + ' -o ' + format + ' -t ' + str(timeout) + ' -b ' + str(baud) + ' -p ' + port + ' > /tmp/__currentcost_out.tmp 2> /tmp/__currentcost_out.err && mv /tmp/__currentcost_out.tmp /tmp/__currentcost_out && rm /tmp/__currentcost.lock & ')
	else:
		os.system('rm /tmp/__currentcost.lock')
	

if __name__ == "__main__":
    sys.exit(main(sys.argv))
